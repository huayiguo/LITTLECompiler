;IR code
;LABEL main
;LINK
;ADDI a b $T1
;STOREI $T1 c
;MULTI g j $T2
;MULTI i o $T3
;ADDI $T2 $T3 $T4
;MULTI p l $T5
;ADDI $T4 $T5 $T6
;ADDI $T6 a $T7
;MULTI h j $T8
;ADDI $T7 $T8 $T9
;ADDI $T9 k $T10
;STOREI $T10 b
;MULTI a b $T11
;ADDI $T11 i $T12
;MULTI p p $T13
;ADDI $T12 $T13 $T14
;ADDI $T14 h $T15
;ADDI $T15 j $T16
;ADDI $T16 k $T17
;ADDI $T17 i $T18
;MULTI y u $T19
;DIVI $T19 r $T20
;ADDI $T18 $T19 $T21
;STOREI $T21 c
;ADDI a b $T22
;STOREI $T22 $R
;RET

;tiny code
str str "test"
var a
var b
var c
var g
var h
var i
var j
var k
var l
var p
var o
var r
var u
var y
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;LABEL main	 live vars: a, b, g, j, i, o, p, l, h, k, y, u, r, 
label main
;LINK	 live vars: a, b, g, j, i, o, p, l, h, k, y, u, r, 
link 22
;ADDI a b $T1	 live vars: $T1, g, j, i, o, p, l, a, h, k, y, u, r, 
;ensure(): a gets register r3 { r0->null r1->null r2->null r3->a }
;loading a to register r3
move a r3
;ensure(): b gets register r2 { r0->null r1->null r2->b r3->a }
;loading b to register r2
move b r2
;Switching owner of register r3 to $T1 { r0->null r1->null r2->b r3->a }
addi r2 r3
;Freeing unused variable b
;STOREI $T1 c	 live vars: g, j, i, o, p, l, a, h, k, y, u, r, 
;ensure(): $T1 has register r3 { r0->null r1->null r2->null r3->$T1 }
;ensure(): c gets register r2 { r0->null r1->null r2->c r3->$T1 }
move r3 r2
;Freeing unused variable $T1
;Spilling variable: $T1
move r3 $-1
;Freeing unused variable c
;Spilling variable: c
move r2 c
;MULTI g j $T2	 live vars: i, o, $T2, p, l, a, h, j, k, y, u, r, 
;ensure(): g gets register r3 { r0->null r1->null r2->null r3->g }
;loading g to register r3
move g r3
;ensure(): j gets register r2 { r0->null r1->null r2->j r3->g }
;loading j to register r2
move j r2
;Switching owner of register r3 to $T2 { r0->null r1->null r2->j r3->g }
muli r2 r3
;MULTI i o $T3	 live vars: $T2, $T3, p, l, a, h, j, k, i, y, u, r, 
;ensure(): i gets register r1 { r0->null r1->i r2->j r3->$T2 }
;loading i to register r1
move i r1
;ensure(): o gets register r0 { r0->o r1->i r2->j r3->$T2 }
;loading o to register r0
move o r0
;Switching owner of register r1 to $T3 { r0->o r1->i r2->j r3->$T2 }
muli r0 r1
;Freeing unused variable o
;ADDI $T2 $T3 $T4	 live vars: p, l, $T4, a, h, j, k, i, y, u, r, 
;ensure(): $T2 has register r3 { r0->null r1->$T3 r2->j r3->$T2 }
;ensure(): $T3 has register r1 { r0->null r1->$T3 r2->j r3->$T2 }
;Switching owner of register r3 to $T4 { r0->null r1->$T3 r2->j r3->$T2 }
;Spilling variable: $T2
move r3 $-2
addi r1 r3
;Freeing unused variable $T3
;Spilling variable: $T3
move r1 $-3
;MULTI p l $T5	 live vars: $T4, $T5, a, h, j, k, i, p, y, u, r, 
;ensure(): p gets register r1 { r0->null r1->p r2->j r3->$T4 }
;loading p to register r1
move p r1
;ensure(): l gets register r0 { r0->l r1->p r2->j r3->$T4 }
;loading l to register r0
move l r0
;Switching owner of register r1 to $T5 { r0->l r1->p r2->j r3->$T4 }
muli r0 r1
;Freeing unused variable l
;ADDI $T4 $T5 $T6	 live vars: $T6, a, h, j, k, i, p, y, u, r, 
;ensure(): $T4 has register r3 { r0->null r1->$T5 r2->j r3->$T4 }
;ensure(): $T5 has register r1 { r0->null r1->$T5 r2->j r3->$T4 }
;Switching owner of register r3 to $T6 { r0->null r1->$T5 r2->j r3->$T4 }
;Spilling variable: $T4
move r3 $-4
addi r1 r3
;Freeing unused variable $T5
;Spilling variable: $T5
move r1 $-5
;ADDI $T6 a $T7	 live vars: h, j, $T7, k, a, i, p, y, u, r, 
;ensure(): $T6 has register r3 { r0->null r1->null r2->j r3->$T6 }
;ensure(): a gets register r1 { r0->null r1->a r2->j r3->$T6 }
;loading a to register r1
move a r1
;Switching owner of register r3 to $T7 { r0->null r1->a r2->j r3->$T6 }
;Spilling variable: $T6
move r3 $-6
addi r1 r3
;MULTI h j $T8	 live vars: $T7, $T8, k, a, i, p, h, j, y, u, r, 
;ensure(): h gets register r0 { r0->h r1->a r2->j r3->$T7 }
;loading h to register r0
move h r0
;ensure(): j has register r2 { r0->h r1->a r2->j r3->$T7 }
;Switching owner of register r0 to $T8 { r0->h r1->a r2->j r3->$T7 }
muli r2 r0
;ADDI $T7 $T8 $T9	 live vars: $T9, k, a, i, p, h, j, y, u, r, 
;ensure(): $T7 has register r3 { r0->$T8 r1->a r2->j r3->$T7 }
;ensure(): $T8 has register r0 { r0->$T8 r1->a r2->j r3->$T7 }
;Switching owner of register r3 to $T9 { r0->$T8 r1->a r2->j r3->$T7 }
;Spilling variable: $T7
move r3 $-7
addi r0 r3
;Freeing unused variable $T8
;Spilling variable: $T8
move r0 $-8
;ADDI $T9 k $T10	 live vars: $T10, a, i, p, h, j, k, y, u, r, 
;ensure(): $T9 has register r3 { r0->null r1->a r2->j r3->$T9 }
;ensure(): k gets register r0 { r0->k r1->a r2->j r3->$T9 }
;loading k to register r0
move k r0
;Switching owner of register r3 to $T10 { r0->k r1->a r2->j r3->$T9 }
;Spilling variable: $T9
move r3 $-9
addi r0 r3
;STOREI $T10 b	 live vars: a, b, i, p, h, j, k, y, u, r, 
;ensure(): $T10 has register r3 { r0->k r1->a r2->j r3->$T10 }
;allocate() has to spill k
;ensure(): b gets register r0 { r0->b r1->a r2->j r3->$T10 }
move r3 r0
;Freeing unused variable $T10
;Spilling variable: $T10
move r3 $-10
;MULTI a b $T11	 live vars: $T11, i, p, h, j, k, y, u, r, a, b, 
;ensure(): a has register r1 { r0->b r1->a r2->j r3->null }
;ensure(): b has register r0 { r0->b r1->a r2->j r3->null }
;Switching owner of register r1 to $T11 { r0->b r1->a r2->j r3->null }
muli r0 r1
;ADDI $T11 i $T12	 live vars: p, $T12, h, j, k, i, y, u, r, a, b, 
;ensure(): $T11 has register r1 { r0->b r1->$T11 r2->j r3->null }
;ensure(): i gets register r3 { r0->b r1->$T11 r2->j r3->i }
;loading i to register r3
move i r3
;Switching owner of register r1 to $T12 { r0->b r1->$T11 r2->j r3->i }
;Spilling variable: $T11
move r1 $-11
addi r3 r1
;MULTI p p $T13	 live vars: $T12, $T13, h, j, k, i, y, u, r, a, b, 
;allocate() has to spill b
;Spilling variable: b
move r0 b
;ensure(): p gets register r0 { r0->p r1->$T12 r2->j r3->i }
;loading p to register r0
move p r0
;ensure(): p has register r0 { r0->p r1->$T12 r2->j r3->i }
;Switching owner of register r0 to $T13 { r0->p r1->$T12 r2->j r3->i }
muli r0 r0
;ADDI $T12 $T13 $T14	 live vars: $T14, h, j, k, i, y, u, r, a, b, 
;ensure(): $T12 has register r1 { r0->$T13 r1->$T12 r2->j r3->i }
;ensure(): $T13 has register r0 { r0->$T13 r1->$T12 r2->j r3->i }
;Switching owner of register r1 to $T14 { r0->$T13 r1->$T12 r2->j r3->i }
;Spilling variable: $T12
move r1 $-12
addi r0 r1
;Freeing unused variable $T13
;Spilling variable: $T13
move r0 $-13
;ADDI $T14 h $T15	 live vars: $T15, j, k, i, y, u, r, a, b, 
;ensure(): $T14 has register r1 { r0->null r1->$T14 r2->j r3->i }
;ensure(): h gets register r0 { r0->h r1->$T14 r2->j r3->i }
;loading h to register r0
move h r0
;Switching owner of register r1 to $T15 { r0->h r1->$T14 r2->j r3->i }
;Spilling variable: $T14
move r1 $-14
addi r0 r1
;Freeing unused variable h
;ADDI $T15 j $T16	 live vars: $T16, k, i, y, u, r, a, b, 
;ensure(): $T15 has register r1 { r0->null r1->$T15 r2->j r3->i }
;ensure(): j has register r2 { r0->null r1->$T15 r2->j r3->i }
;Switching owner of register r1 to $T16 { r0->null r1->$T15 r2->j r3->i }
;Spilling variable: $T15
move r1 $-15
addi r2 r1
;Freeing unused variable j
;ADDI $T16 k $T17	 live vars: $T17, i, y, u, r, a, b, 
;ensure(): $T16 has register r1 { r0->null r1->$T16 r2->null r3->i }
;ensure(): k gets register r2 { r0->null r1->$T16 r2->k r3->i }
;loading k to register r2
move k r2
;Switching owner of register r1 to $T17 { r0->null r1->$T16 r2->k r3->i }
;Spilling variable: $T16
move r1 $-16
addi r2 r1
;Freeing unused variable k
;ADDI $T17 i $T18	 live vars: y, u, r, $T18, a, b, 
;ensure(): $T17 has register r1 { r0->null r1->$T17 r2->null r3->i }
;ensure(): i has register r3 { r0->null r1->$T17 r2->null r3->i }
;Switching owner of register r1 to $T18 { r0->null r1->$T17 r2->null r3->i }
;Spilling variable: $T17
move r1 $-17
addi r3 r1
;Freeing unused variable i
;MULTI y u $T19	 live vars: $T19, r, $T18, a, b, 
;ensure(): y gets register r3 { r0->null r1->$T18 r2->null r3->y }
;loading y to register r3
move y r3
;ensure(): u gets register r2 { r0->null r1->$T18 r2->u r3->y }
;loading u to register r2
move u r2
;Switching owner of register r3 to $T19 { r0->null r1->$T18 r2->u r3->y }
muli r2 r3
;Freeing unused variable u
;DIVI $T19 r $T20	 live vars: $T18, $T19, a, b, 
;ensure(): $T19 has register r3 { r0->null r1->$T18 r2->null r3->$T19 }
;ensure(): r gets register r2 { r0->null r1->$T18 r2->r r3->$T19 }
;loading r to register r2
move r r2
;Switching owner of register r3 to $T20 { r0->null r1->$T18 r2->r r3->$T19 }
;Spilling variable: $T19
move r3 $-19
;Freeing unused variable $T20
;Spilling variable: $T20
move r3 $-20
divi r2 r3
;Freeing unused variable r
;ADDI $T18 $T19 $T21	 live vars: $T21, a, b, 
;ensure(): $T18 has register r1 { r0->null r1->$T18 r2->null r3->null }
;ensure(): $T19 gets register r3 { r0->null r1->$T18 r2->null r3->$T19 }
;loading $T19 to register r3
move $-19 r3
;Switching owner of register r1 to $T21 { r0->null r1->$T18 r2->null r3->$T19 }
;Spilling variable: $T18
move r1 $-18
addi r3 r1
;Freeing unused variable $T19
;STOREI $T21 c	 live vars: a, b, 
;ensure(): $T21 has register r1 { r0->null r1->$T21 r2->null r3->null }
;ensure(): c gets register r3 { r0->null r1->$T21 r2->null r3->c }
move r1 r3
;Freeing unused variable $T21
;Spilling variable: $T21
move r1 $-21
;Freeing unused variable c
;Spilling variable: c
move r3 c
;ADDI a b $T22	 live vars: $T22, 
;ensure(): a gets register r3 { r0->null r1->null r2->null r3->a }
;loading a to register r3
move a r3
;ensure(): b gets register r2 { r0->null r1->null r2->b r3->a }
;loading b to register r2
move b r2
;Switching owner of register r3 to $T22 { r0->null r1->null r2->b r3->a }
addi r2 r3
;Freeing unused variable b
;STOREI $T22 $R	 live vars: 
;ensure(): $T22 has register r3 { r0->null r1->null r2->null r3->$T22 }
move r3 $6
;Freeing unused variable $T22
;Spilling variable: $T22
move r3 $-22
;RET	 live vars: 
unlnk
ret
;Spilling registers at the end of the Basic Block
end
